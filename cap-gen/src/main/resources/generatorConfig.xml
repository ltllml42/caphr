<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 引入 application.yml -->
    <properties resource="application.yml" />

    <!-- MyBatis3Simple：不生成 Example相关类及方法 -->
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <property name="beginningDelimiter" value="`" />
        <property name="endingDelimiter" value="`" />

        <!-- 指定生成 Mapper 的继承模板 -->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="com.capinfo.mappers.MyBaseMapper" />
        </plugin>

        <!-- 生成 JavaBean 对象重写 toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />

        <!-- 生成 JavaBean 对象继承 Serializable 类 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- 生成 JavaBean 对象重写 equals 和 hashCode 方法 -->
        <!-- <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" /> -->

        <!-- jdbc 连接配置 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/jeesite4?characterEncoding=utf-8&amp;useSSL=false"
                        userId="root"
                        password="root">
        </jdbcConnection>
        <!--生成Model类存放位置 -->
        <javaModelGenerator targetPackage="com.capinfo.entity"			targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <!-- <property name="enableSubPackages" value="true" />-->
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <!--<property name="trimStrings" value="true" />-->
            <!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； -->
            <!--<property name="constructorBased" value="false" />-->
            <!-- for MyBatis3/MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 -->
            <!--<property name="immutable" value="false" />-->
        </javaModelGenerator>
        <!--生成映射文件存放位置 -->
        <sqlMapGenerator targetPackage="mappers"			targetProject="src/main/resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator> 		<!--生成Dao类存放位置 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.capinfo.mapper" targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>


        <!-- Mysql 配置 -->
        <!-- <generatedKey column="id" sqlStatement="Mysql" identity="true" /> -->
        <!-- Oracle 配置 -->
        <!-- <generatedKey column="id" sqlStatement="select SEQ_{1}.nextval from dual" identity="false" type="pre"/> -->

        <!-- tableName：数据库表名，domainObjectName：生成文件名 ，schema：数据源-->
        <table tableName="%" enableCountByExample="false"			enableUpdateByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="true" />
            <!-- 需要插入时返回主键值，请将此属性打开，column值为主键的列明 -->
            <!--<generatedKey column="id" sqlStatement="MySql" identity="true" />-->
        </table>

    </context>
</generatorConfiguration>